/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).  ## Rate limits  Our APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:  - `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window. - `X-RateLimit-Remaining` - The number of requests remaining in the current time window. - `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.  Additionally, Our Risk, Filter (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.castle.client.model.generated;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import org.threeten.bp.OffsetDateTime;

import java.io.IOException;
import java.util.Objects;
/**
 * Aggregation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T18:58:06.855017776Z[GMT]")

public class Aggregation extends AggregationBase {
  /**
   * Gets or Sets aggregationType
   */
  @JsonAdapter(AggregationTypeEnum.Adapter.class)
  public enum AggregationTypeEnum {
    @SerializedName("$avg")
    AVG("$avg"),
    @SerializedName("$count")
    COUNT("$count"),
    @SerializedName("$count_uniq")
    COUNT_UNIQ("$count_uniq"),
    @SerializedName("$first")
    FIRST("$first"),
    @SerializedName("$last")
    LAST("$last"),
    @SerializedName("$max")
    MAX("$max"),
    @SerializedName("$min")
    MIN("$min"),
    @SerializedName("$sum")
    SUM("$sum");

    private String value;

    AggregationTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AggregationTypeEnum fromValue(String input) {
      for (AggregationTypeEnum b : AggregationTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AggregationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AggregationTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AggregationTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("aggregation_type")
  private AggregationTypeEnum aggregationType = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("author")
  private AggregationAuthor author = null;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("archived_at")
  private OffsetDateTime archivedAt = null;

  public Aggregation aggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

   /**
   * Get aggregationType
   * @return aggregationType
  **/
  @ApiModelProperty(value = "")
  public AggregationTypeEnum getAggregationType() {
    return aggregationType;
  }

  public void setAggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
  }

  public Aggregation id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * ID of the Aggregation
   * @return id
  **/
  @ApiModelProperty(example = "118", value = "ID of the Aggregation")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Aggregation author(AggregationAuthor author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @ApiModelProperty(value = "")
  public AggregationAuthor getAuthor() {
    return author;
  }

  public void setAuthor(AggregationAuthor author) {
    this.author = author;
  }

  public Aggregation active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Indicates whether the Aggregation is active or not.
   * @return active
  **/
  @ApiModelProperty(value = "Indicates whether the Aggregation is active or not.")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public Aggregation createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp of when Aggregation was created.
   * @return createdAt
  **/
  @ApiModelProperty(example = "2022-10-23T17:21:39.213Z", value = "Timestamp of when Aggregation was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Aggregation updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp of when Aggregation was last updated.
   * @return updatedAt
  **/
  @ApiModelProperty(example = "2022-10-23T17:21:39.213Z", value = "Timestamp of when Aggregation was last updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Aggregation archivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
    return this;
  }

   /**
   * Timestamp of when Aggregation was archived.
   * @return archivedAt
  **/
  @ApiModelProperty(example = "2022-10-23T17:21:39.213Z", value = "Timestamp of when Aggregation was archived.")
  public OffsetDateTime getArchivedAt() {
    return archivedAt;
  }

  public void setArchivedAt(OffsetDateTime archivedAt) {
    this.archivedAt = archivedAt;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Aggregation aggregation = (Aggregation) o;
    return Objects.equals(this.aggregationType, aggregation.aggregationType) &&
        Objects.equals(this.id, aggregation.id) &&
        Objects.equals(this.author, aggregation.author) &&
        Objects.equals(this.active, aggregation.active) &&
        Objects.equals(this.createdAt, aggregation.createdAt) &&
        Objects.equals(this.updatedAt, aggregation.updatedAt) &&
        Objects.equals(this.archivedAt, aggregation.archivedAt) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationType, id, author, active, createdAt, updatedAt, archivedAt, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Aggregation {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    archivedAt: ").append(toIndentedString(archivedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

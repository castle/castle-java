/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).   ## Rate limits  Our Risk, Log (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.castle.client.model.generated;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * PaymentMethodCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-05T12:03:37.030848+02:00[Europe/Stockholm]")
public class PaymentMethodCard {
  public static final String SERIALIZED_NAME_BIN = "bin";
  @SerializedName(SERIALIZED_NAME_BIN)
  private String bin;

  public static final String SERIALIZED_NAME_LAST4 = "last4";
  @SerializedName(SERIALIZED_NAME_LAST4)
  private String last4;

  public static final String SERIALIZED_NAME_EXP_MONTH = "exp_month";
  @SerializedName(SERIALIZED_NAME_EXP_MONTH)
  private Integer expMonth;

  public static final String SERIALIZED_NAME_EXP_YEAR = "exp_year";
  @SerializedName(SERIALIZED_NAME_EXP_YEAR)
  private Integer expYear;

  /**
   * Gets or Sets network
   */
  @JsonAdapter(NetworkEnum.Adapter.class)
  public enum NetworkEnum {
    AMEX("$amex"),
    
    CARTES_BANCAIRES("$cartes_bancaires"),
    
    DINERS("$diners"),
    
    DISCOVER("$discover"),
    
    INTERAC("$interac"),
    
    JCB("$jcb"),
    
    MASTERCARD("$mastercard"),
    
    OTHER("$other"),
    
    UNIONPAY("$unionpay"),
    
    VISA("$visa");

    private String value;

    NetworkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkEnum fromValue(String value) {
      for (NetworkEnum b : NetworkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private NetworkEnum network;

  /**
   * Gets or Sets funding
   */
  @JsonAdapter(FundingEnum.Adapter.class)
  public enum FundingEnum {
    CREDIT("$credit"),
    
    DEBIT("$debit"),
    
    OTHER("$other"),
    
    PREPAID("$prepaid");

    private String value;

    FundingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FundingEnum fromValue(String value) {
      for (FundingEnum b : FundingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FundingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FundingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FundingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FundingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FUNDING = "funding";
  @SerializedName(SERIALIZED_NAME_FUNDING)
  private FundingEnum funding;


  public PaymentMethodCard bin(String bin) {
    
    this.bin = bin;
    return this;
  }

   /**
   * Get bin
   * @return bin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBin() {
    return bin;
  }


  public void setBin(String bin) {
    this.bin = bin;
  }


  public PaymentMethodCard last4(String last4) {
    
    this.last4 = last4;
    return this;
  }

   /**
   * Get last4
   * @return last4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLast4() {
    return last4;
  }


  public void setLast4(String last4) {
    this.last4 = last4;
  }


  public PaymentMethodCard expMonth(Integer expMonth) {
    
    this.expMonth = expMonth;
    return this;
  }

   /**
   * Get expMonth
   * minimum: 1
   * maximum: 12
   * @return expMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpMonth() {
    return expMonth;
  }


  public void setExpMonth(Integer expMonth) {
    this.expMonth = expMonth;
  }


  public PaymentMethodCard expYear(Integer expYear) {
    
    this.expYear = expYear;
    return this;
  }

   /**
   * Get expYear
   * minimum: 2000
   * maximum: 2100
   * @return expYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getExpYear() {
    return expYear;
  }


  public void setExpYear(Integer expYear) {
    this.expYear = expYear;
  }


  public PaymentMethodCard network(NetworkEnum network) {
    
    this.network = network;
    return this;
  }

   /**
   * Get network
   * @return network
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NetworkEnum getNetwork() {
    return network;
  }


  public void setNetwork(NetworkEnum network) {
    this.network = network;
  }


  public PaymentMethodCard funding(FundingEnum funding) {
    
    this.funding = funding;
    return this;
  }

   /**
   * Get funding
   * @return funding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FundingEnum getFunding() {
    return funding;
  }


  public void setFunding(FundingEnum funding) {
    this.funding = funding;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethodCard paymentMethodCard = (PaymentMethodCard) o;
    return Objects.equals(this.bin, paymentMethodCard.bin) &&
        Objects.equals(this.last4, paymentMethodCard.last4) &&
        Objects.equals(this.expMonth, paymentMethodCard.expMonth) &&
        Objects.equals(this.expYear, paymentMethodCard.expYear) &&
        Objects.equals(this.network, paymentMethodCard.network) &&
        Objects.equals(this.funding, paymentMethodCard.funding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bin, last4, expMonth, expYear, network, funding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethodCard {\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    last4: ").append(toIndentedString(last4)).append("\n");
    sb.append("    expMonth: ").append(toIndentedString(expMonth)).append("\n");
    sb.append("    expYear: ").append(toIndentedString(expYear)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    funding: ").append(toIndentedString(funding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


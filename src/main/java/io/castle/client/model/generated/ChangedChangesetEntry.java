/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).   ## Rate limits  Our Risk, Log (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.castle.client.model.generated;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * Information that the attribute changed along with the changed values. Examples: &#x60;{ \&quot;password\&quot;: { \&quot;changed\&quot;: true } }&#x60;
 */
@ApiModel(description = "Information that the attribute changed along with the changed values. Examples: `{ \"password\": { \"changed\": true } }`")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-16T17:44:30.591898+02:00[Europe/Stockholm]")
public class ChangedChangesetEntry {
  /**
   * Gets or Sets changed
   */
  @JsonAdapter(ChangedEnum.Adapter.class)
  public enum ChangedEnum {
    TRUE(true);

    private Boolean value;

    ChangedEnum(Boolean value) {
      this.value = value;
    }

    public Boolean getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangedEnum fromValue(Boolean value) {
      for (ChangedEnum b : ChangedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangedEnum read(final JsonReader jsonReader) throws IOException {
        Boolean value =  jsonReader.nextBoolean();
        return ChangedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CHANGED = "changed";
  @SerializedName(SERIALIZED_NAME_CHANGED)
  private ChangedEnum changed;


  public ChangedChangesetEntry changed(ChangedEnum changed) {
    
    this.changed = changed;
    return this;
  }

   /**
   * Get changed
   * @return changed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ChangedEnum getChanged() {
    return changed;
  }


  public void setChanged(ChangedEnum changed) {
    this.changed = changed;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangedChangesetEntry changedChangesetEntry = (ChangedChangesetEntry) o;
    return Objects.equals(this.changed, changedChangesetEntry.changed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangedChangesetEntry {\n");
    sb.append("    changed: ").append(toIndentedString(changed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).  ## Rate limits  Our APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:  - `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window. - `X-RateLimit-Remaining` - The number of requests remaining in the current time window. - `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.  Additionally, Our Risk, Filter (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.castle.client.model.generated;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * RelativeRangeQueryFilterValue
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T18:58:06.855017776Z[GMT]")

public class RelativeRangeQueryFilterValue {
  @SerializedName("gteq")
  private Integer gteq = null;

  @SerializedName("gt")
  private Integer gt = null;

  @SerializedName("lteq")
  private Integer lteq = null;

  @SerializedName("lt")
  private Integer lt = null;

  public RelativeRangeQueryFilterValue gteq(Integer gteq) {
    this.gteq = gteq;
    return this;
  }

   /**
   * Get gteq
   * @return gteq
  **/
  @ApiModelProperty(value = "")
  public Integer getGteq() {
    return gteq;
  }

  public void setGteq(Integer gteq) {
    this.gteq = gteq;
  }

  public RelativeRangeQueryFilterValue gt(Integer gt) {
    this.gt = gt;
    return this;
  }

   /**
   * Get gt
   * @return gt
  **/
  @ApiModelProperty(value = "")
  public Integer getGt() {
    return gt;
  }

  public void setGt(Integer gt) {
    this.gt = gt;
  }

  public RelativeRangeQueryFilterValue lteq(Integer lteq) {
    this.lteq = lteq;
    return this;
  }

   /**
   * Get lteq
   * @return lteq
  **/
  @ApiModelProperty(value = "")
  public Integer getLteq() {
    return lteq;
  }

  public void setLteq(Integer lteq) {
    this.lteq = lteq;
  }

  public RelativeRangeQueryFilterValue lt(Integer lt) {
    this.lt = lt;
    return this;
  }

   /**
   * Get lt
   * @return lt
  **/
  @ApiModelProperty(value = "")
  public Integer getLt() {
    return lt;
  }

  public void setLt(Integer lt) {
    this.lt = lt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelativeRangeQueryFilterValue relativeRangeQueryFilterValue = (RelativeRangeQueryFilterValue) o;
    return Objects.equals(this.gteq, relativeRangeQueryFilterValue.gteq) &&
        Objects.equals(this.gt, relativeRangeQueryFilterValue.gt) &&
        Objects.equals(this.lteq, relativeRangeQueryFilterValue.lteq) &&
        Objects.equals(this.lt, relativeRangeQueryFilterValue.lt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gteq, gt, lteq, lt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelativeRangeQueryFilterValue {\n");
    
    sb.append("    gteq: ").append(toIndentedString(gteq)).append("\n");
    sb.append("    gt: ").append(toIndentedString(gt)).append("\n");
    sb.append("    lteq: ").append(toIndentedString(lteq)).append("\n");
    sb.append("    lt: ").append(toIndentedString(lt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).  ## Rate limits  Our APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:  - `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window. - `X-RateLimit-Remaining` - The number of requests remaining in the current time window. - `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.  Additionally, Our Risk, Filter (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.castle.client.model.generated;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;
/**
 * User Email Object
 */
@ApiModel(value = "User Email Object")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T18:58:06.855017776Z[GMT]")

public class FilterAndRiskResponseEmail {
  @SerializedName("normalized")
  private String normalized = null;

  @SerializedName("domain")
  private String domain = null;

  @SerializedName("disposable")
  private Boolean disposable = null;

  @SerializedName("unreachable")
  private Boolean unreachable = null;

  @SerializedName("domain_details")
  private FilterAndRiskResponseEmailDomainDetails domainDetails = null;

  public FilterAndRiskResponseEmail normalized(String normalized) {
    this.normalized = normalized;
    return this;
  }

   /**
   * Get normalized
   * @return normalized
  **/
  @ApiModelProperty(example = "user.email@example.com", value = "")
  public String getNormalized() {
    return normalized;
  }

  public void setNormalized(String normalized) {
    this.normalized = normalized;
  }

  public FilterAndRiskResponseEmail domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Get domain
   * @return domain
  **/
  @ApiModelProperty(example = "gmail.com", value = "")
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }

  public FilterAndRiskResponseEmail disposable(Boolean disposable) {
    this.disposable = disposable;
    return this;
  }

   /**
   * Get disposable
   * @return disposable
  **/
  @ApiModelProperty(example = "false", value = "")
  public Boolean isDisposable() {
    return disposable;
  }

  public void setDisposable(Boolean disposable) {
    this.disposable = disposable;
  }

  public FilterAndRiskResponseEmail unreachable(Boolean unreachable) {
    this.unreachable = unreachable;
    return this;
  }

   /**
   * Get unreachable
   * @return unreachable
  **/
  @ApiModelProperty(example = "false", value = "")
  public Boolean isUnreachable() {
    return unreachable;
  }

  public void setUnreachable(Boolean unreachable) {
    this.unreachable = unreachable;
  }

  public FilterAndRiskResponseEmail domainDetails(FilterAndRiskResponseEmailDomainDetails domainDetails) {
    this.domainDetails = domainDetails;
    return this;
  }

   /**
   * Get domainDetails
   * @return domainDetails
  **/
  @ApiModelProperty(value = "")
  public FilterAndRiskResponseEmailDomainDetails getDomainDetails() {
    return domainDetails;
  }

  public void setDomainDetails(FilterAndRiskResponseEmailDomainDetails domainDetails) {
    this.domainDetails = domainDetails;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterAndRiskResponseEmail email = (FilterAndRiskResponseEmail) o;
    return Objects.equals(this.normalized, email.normalized) &&
        Objects.equals(this.domain, email.domain) &&
        Objects.equals(this.disposable, email.disposable) &&
        Objects.equals(this.unreachable, email.unreachable) &&
        Objects.equals(this.domainDetails, email.domainDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(normalized, domain, disposable, unreachable, domainDetails);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterAndRiskResponseEmail {\n");
    
    sb.append("    normalized: ").append(toIndentedString(normalized)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    disposable: ").append(toIndentedString(disposable)).append("\n");
    sb.append("    unreachable: ").append(toIndentedString(unreachable)).append("\n");
    sb.append("    domainDetails: ").append(toIndentedString(domainDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

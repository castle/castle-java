/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).  ## Rate limits  Our APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:  - `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window. - `X-RateLimit-Remaining` - The number of requests remaining in the current time window. - `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.  Additionally, Our Risk, Filter (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.castle.client.model.generated;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ListItemRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T18:58:06.855017776Z[GMT]")

public class ListItemRequest extends BaseItem {
  /**
   * Describes a strategy to use when a List Item with the same &#x60;(primary, secondary)&#x60; values is already in the List. Available strategies:   - &#x60;$error&#x60; - return a 422 HTTP error   - &#x60;$replace&#x60; - archive the existing List Item and create a new one   - &#x60;$update&#x60; - if the author matches the existing List Item, update it. Otherwise, throw an HTTP 422 error.   - &#x60;$update_or_replace&#x60; - if the author matches the existing List Item, update it. Otherwise, archive the existing List Item and create a new one. 
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    @SerializedName("$error")
    ERROR("$error"),
    @SerializedName("$replace")
    REPLACE("$replace"),
    @SerializedName("$update")
    UPDATE("$update"),
    @SerializedName("$update_or_replace")
    UPDATE_OR_REPLACE("$update_or_replace");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String input) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ModeEnum.fromValue((String)(value));
      }
    }
  }
  @SerializedName("mode")
  private ModeEnum mode = ModeEnum.ERROR;

  public ListItemRequest mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Describes a strategy to use when a List Item with the same &#x60;(primary, secondary)&#x60; values is already in the List. Available strategies:   - &#x60;$error&#x60; - return a 422 HTTP error   - &#x60;$replace&#x60; - archive the existing List Item and create a new one   - &#x60;$update&#x60; - if the author matches the existing List Item, update it. Otherwise, throw an HTTP 422 error.   - &#x60;$update_or_replace&#x60; - if the author matches the existing List Item, update it. Otherwise, archive the existing List Item and create a new one. 
   * @return mode
  **/
  @ApiModelProperty(value = "Describes a strategy to use when a List Item with the same `(primary, secondary)` values is already in the List. Available strategies:   - `$error` - return a 422 HTTP error   - `$replace` - archive the existing List Item and create a new one   - `$update` - if the author matches the existing List Item, update it. Otherwise, throw an HTTP 422 error.   - `$update_or_replace` - if the author matches the existing List Item, update it. Otherwise, archive the existing List Item and create a new one. ")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListItemRequest listItemRequest = (ListItemRequest) o;
    return Objects.equals(this.mode, listItemRequest.mode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListItemRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

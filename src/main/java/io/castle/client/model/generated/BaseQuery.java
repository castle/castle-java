/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).  ## Rate limits  Our APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:  - `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window. - `X-RateLimit-Remaining` - The number of requests remaining in the current time window. - `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.  Additionally, Our Risk, Filter (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.castle.client.model.generated;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * BaseQuery
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T18:58:06.855017776Z[GMT]")

public class BaseQuery {
  @SerializedName("filters")
  private List<BaseQueryFilter> filters = new ArrayList<BaseQueryFilter>();

  /**
   * The type of query to perform.  - &#x60;$count&#x60; returns the number of records matching the query (&#x60;total_count&#x60; will be present and &#x60;data&#x60; will be empty) - &#x60;$records&#x60; returns the records matching the query (&#x60;total_count&#x60; will be 0) - &#x60;$records_with_count&#x60; returns the number of records matching the query and the records matching the query 
   */
  @JsonAdapter(QueryTypeEnum.Adapter.class)
  public enum QueryTypeEnum {
    @SerializedName("$count")
    COUNT("$count"),
    @SerializedName("$records")
    RECORDS("$records"),
    @SerializedName("$records_with_count")
    RECORDS_WITH_COUNT("$records_with_count");

    private String value;

    QueryTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static QueryTypeEnum fromValue(String input) {
      for (QueryTypeEnum b : QueryTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<QueryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public QueryTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return QueryTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("query_type")
  private QueryTypeEnum queryType = QueryTypeEnum.RECORDS_WITH_COUNT;

  @SerializedName("page")
  private Integer page = null;

  public BaseQuery filters(List<BaseQueryFilter> filters) {
    this.filters = filters;
    return this;
  }

  public BaseQuery addFiltersItem(BaseQueryFilter filtersItem) {
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @ApiModelProperty(required = true, value = "")
  public List<BaseQueryFilter> getFilters() {
    return filters;
  }

  public void setFilters(List<BaseQueryFilter> filters) {
    this.filters = filters;
  }

  public BaseQuery queryType(QueryTypeEnum queryType) {
    this.queryType = queryType;
    return this;
  }

   /**
   * The type of query to perform.  - &#x60;$count&#x60; returns the number of records matching the query (&#x60;total_count&#x60; will be present and &#x60;data&#x60; will be empty) - &#x60;$records&#x60; returns the records matching the query (&#x60;total_count&#x60; will be 0) - &#x60;$records_with_count&#x60; returns the number of records matching the query and the records matching the query 
   * @return queryType
  **/
  @ApiModelProperty(value = "The type of query to perform.  - `$count` returns the number of records matching the query (`total_count` will be present and `data` will be empty) - `$records` returns the records matching the query (`total_count` will be 0) - `$records_with_count` returns the number of records matching the query and the records matching the query ")
  public QueryTypeEnum getQueryType() {
    return queryType;
  }

  public void setQueryType(QueryTypeEnum queryType) {
    this.queryType = queryType;
  }

  public BaseQuery page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * Get page
   * minimum: 1
   * @return page
  **/
  @ApiModelProperty(value = "")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseQuery baseQuery = (BaseQuery) o;
    return Objects.equals(this.filters, baseQuery.filters) &&
        Objects.equals(this.queryType, baseQuery.queryType) &&
        Objects.equals(this.page, baseQuery.page);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, queryType, page);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseQuery {\n");
    
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    queryType: ").append(toIndentedString(queryType)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

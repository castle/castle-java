/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).   ## Rate limits  Our Risk, Log (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.castle.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets AuthenticationMethodType
 */
@JsonAdapter(AuthenticationMethodType.Adapter.class)
public enum AuthenticationMethodType {
  
  AUTHENTICATOR("$authenticator"),
  
  BIOMETRICS("$biometrics"),
  
  EMAIL("$email"),
  
  PASSWORD("$password"),
  
  PHONE("$phone"),
  
  PUSH("$push"),
  
  SECURITY_KEY("$security_key"),
  
  SOCIAL("$social"),
  
  SSO("$sso"),
  
  KBA("$kba");

  private String value;

  AuthenticationMethodType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AuthenticationMethodType fromValue(String value) {
    for (AuthenticationMethodType b : AuthenticationMethodType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AuthenticationMethodType> {
    @Override
    public void write(final JsonWriter jsonWriter, final AuthenticationMethodType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AuthenticationMethodType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AuthenticationMethodType.fromValue(value);
    }
  }
}


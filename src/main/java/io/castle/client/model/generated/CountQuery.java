/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).  ## Rate limits  Our APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:  - `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window. - `X-RateLimit-Remaining` - The number of requests remaining in the current time window. - `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.  Additionally, Our Risk, Filter (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.castle.client.model.generated;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * CountQuery
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T18:58:06.855017776Z[GMT]")

public class CountQuery extends BaseQuery {
  @SerializedName("count")
  private String count = null;

  @SerializedName("options")
  private Object options = null;

  @SerializedName("buckets")
  private List<CountQueryBuckets> buckets = null;

  @SerializedName("group_by")
  private GroupBy groupBy = null;

  public CountQuery count(String count) {
    this.count = count;
    return this;
  }

   /**
   * bucket value from fields endpoint
   * @return count
  **/
  @ApiModelProperty(example = "risk_count", value = "bucket value from fields endpoint")
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }

  public CountQuery options(Object options) {
    this.options = options;
    return this;
  }

   /**
   * options to pass to query. see fields response
   * @return options
  **/
  @ApiModelProperty(example = "{\"range\":[0.3,0.6,0.9,1]}", value = "options to pass to query. see fields response")
  public Object getOptions() {
    return options;
  }

  public void setOptions(Object options) {
    this.options = options;
  }

  public CountQuery buckets(List<CountQueryBuckets> buckets) {
    this.buckets = buckets;
    return this;
  }

  public CountQuery addBucketsItem(CountQueryBuckets bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<CountQueryBuckets>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

   /**
   * additional buckets to aggregate on
   * @return buckets
  **/
  @ApiModelProperty(value = "additional buckets to aggregate on")
  public List<CountQueryBuckets> getBuckets() {
    return buckets;
  }

  public void setBuckets(List<CountQueryBuckets> buckets) {
    this.buckets = buckets;
  }

  public CountQuery groupBy(GroupBy groupBy) {
    this.groupBy = groupBy;
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @ApiModelProperty(value = "")
  public GroupBy getGroupBy() {
    return groupBy;
  }

  public void setGroupBy(GroupBy groupBy) {
    this.groupBy = groupBy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountQuery countQuery = (CountQuery) o;
    return Objects.equals(this.count, countQuery.count) &&
        Objects.equals(this.options, countQuery.options) &&
        Objects.equals(this.buckets, countQuery.buckets) &&
        Objects.equals(this.groupBy, countQuery.groupBy) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, options, buckets, groupBy, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountQuery {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).   ## Rate limits  Our Risk, Log (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.castle.client.model.generated;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * FilterResponseScores
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-09-05T12:03:37.030848+02:00[Europe/Stockholm]")
public class Scores {
  public static final String SERIALIZED_NAME_ACCOUNT_ABUSE = "account_abuse";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ABUSE)
  private Score accountAbuse;

  public static final String SERIALIZED_NAME_ACCOUNT_TAKEOVER = "account_takeover";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TAKEOVER)
  private Score accountTakeover;

  public static final String SERIALIZED_NAME_BOT = "bot";
  @SerializedName(SERIALIZED_NAME_BOT)
  private Score bot;


  public Scores accountAbuse(Score accountAbuse) {
    
    this.accountAbuse = accountAbuse;
    return this;
  }

   /**
   * Get accountAbuse
   * @return accountAbuse
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Score getAccountAbuse() {
    return accountAbuse;
  }


  public void setAccountAbuse(Score accountAbuse) {
    this.accountAbuse = accountAbuse;
  }


  public Scores accountTakeover(Score accountTakeover) {
    
    this.accountTakeover = accountTakeover;
    return this;
  }

   /**
   * Get accountTakeover
   * @return accountTakeover
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Score getAccountTakeover() {
    return accountTakeover;
  }


  public void setAccountTakeover(Score accountTakeover) {
    this.accountTakeover = accountTakeover;
  }


  public Scores bot(Score bot) {
    
    this.bot = bot;
    return this;
  }

   /**
   * Get bot
   * @return bot
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Score getBot() {
    return bot;
  }


  public void setBot(Score bot) {
    this.bot = bot;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scores scores = (Scores) o;
    return Objects.equals(this.accountAbuse, scores.accountAbuse) &&
        Objects.equals(this.accountTakeover, scores.accountTakeover) &&
        Objects.equals(this.bot, scores.bot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountAbuse, accountTakeover, bot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterResponseScores {\n");
    sb.append("    accountAbuse: ").append(toIndentedString(accountAbuse)).append("\n");
    sb.append("    accountTakeover: ").append(toIndentedString(accountTakeover)).append("\n");
    sb.append("    bot: ").append(toIndentedString(bot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).  ## Rate limits  Our APIs implement rate-limiting based on the number of requests made to them. Each request will return the following headers:  - `X-RateLimit-Limit` - The maximum number of requests you're permitted to make in the current time window. - `X-RateLimit-Remaining` - The number of requests remaining in the current time window. - `X-RateLimit-Reset` - The remaining time in seconds until the current time window resets.  Additionally, Our Risk, Filter (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.castle.client.model.generated;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
/**
 * GroupQueryParams
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-01-20T18:58:06.855017776Z[GMT]")

public class GroupQueryParams extends BaseQuery {
  @SerializedName("aggregations")
  private List<AggregationRequest> aggregations = null;

  @SerializedName("formulas")
  private List<FormulaRequest> formulas = null;

  @SerializedName("group_by")
  private GroupBy groupBy = null;

  @SerializedName("columns")
  private List<Column> columns = new ArrayList<Column>();

  @SerializedName("having")
  private List<Object> having = null;

  @SerializedName("sort")
  private UnnamedColumnWithOrder sort = null;

  public GroupQueryParams aggregations(List<AggregationRequest> aggregations) {
    this.aggregations = aggregations;
    return this;
  }

  public GroupQueryParams addAggregationsItem(AggregationRequest aggregationsItem) {
    if (this.aggregations == null) {
      this.aggregations = new ArrayList<AggregationRequest>();
    }
    this.aggregations.add(aggregationsItem);
    return this;
  }

   /**
   * EXPERIMENTAL! Array of aggregations to include in the response. For each aggregation, you can reference its name in the &#x60;columns&#x60;, &#x60;sort&#x60;, and &#x60;having&#x60; fields. 
   * @return aggregations
  **/
  @ApiModelProperty(value = "EXPERIMENTAL! Array of aggregations to include in the response. For each aggregation, you can reference its name in the `columns`, `sort`, and `having` fields. ")
  public List<AggregationRequest> getAggregations() {
    return aggregations;
  }

  public void setAggregations(List<AggregationRequest> aggregations) {
    this.aggregations = aggregations;
  }

  public GroupQueryParams formulas(List<FormulaRequest> formulas) {
    this.formulas = formulas;
    return this;
  }

  public GroupQueryParams addFormulasItem(FormulaRequest formulasItem) {
    if (this.formulas == null) {
      this.formulas = new ArrayList<FormulaRequest>();
    }
    this.formulas.add(formulasItem);
    return this;
  }

   /**
   * EXPERIMENTAL! Array of formulas to include in the response. For each formula, you can reference its name in the &#x60;columns&#x60;, &#x60;sort&#x60;, and &#x60;having&#x60; fields. 
   * @return formulas
  **/
  @ApiModelProperty(value = "EXPERIMENTAL! Array of formulas to include in the response. For each formula, you can reference its name in the `columns`, `sort`, and `having` fields. ")
  public List<FormulaRequest> getFormulas() {
    return formulas;
  }

  public void setFormulas(List<FormulaRequest> formulas) {
    this.formulas = formulas;
  }

  public GroupQueryParams groupBy(GroupBy groupBy) {
    this.groupBy = groupBy;
    return this;
  }

   /**
   * Get groupBy
   * @return groupBy
  **/
  @ApiModelProperty(required = true, value = "")
  public GroupBy getGroupBy() {
    return groupBy;
  }

  public void setGroupBy(GroupBy groupBy) {
    this.groupBy = groupBy;
  }

  public GroupQueryParams columns(List<Column> columns) {
    this.columns = columns;
    return this;
  }

  public GroupQueryParams addColumnsItem(Column columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Array of columns to return. Each column references a field and an aggregation function. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.
   * @return columns
  **/
  @ApiModelProperty(required = true, value = "Array of columns to return. Each column references a field and an aggregation function. Consult the [Events Schema API](/#operation/getEventSchema) for the list of available fields.")
  public List<Column> getColumns() {
    return columns;
  }

  public void setColumns(List<Column> columns) {
    this.columns = columns;
  }

  public GroupQueryParams having(List<Object> having) {
    this.having = having;
    return this;
  }

  public GroupQueryParams addHavingItem(Object havingItem) {
    if (this.having == null) {
      this.having = new ArrayList<Object>();
    }
    this.having.add(havingItem);
    return this;
  }

   /**
   * field should contain the \&quot;name\&quot; value from your columns
   * @return having
  **/
  @ApiModelProperty(value = "field should contain the \"name\" value from your columns")
  public List<Object> getHaving() {
    return having;
  }

  public void setHaving(List<Object> having) {
    this.having = having;
  }

  public GroupQueryParams sort(UnnamedColumnWithOrder sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @ApiModelProperty(value = "")
  public UnnamedColumnWithOrder getSort() {
    return sort;
  }

  public void setSort(UnnamedColumnWithOrder sort) {
    this.sort = sort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupQueryParams groupQueryParams = (GroupQueryParams) o;
    return Objects.equals(this.aggregations, groupQueryParams.aggregations) &&
        Objects.equals(this.formulas, groupQueryParams.formulas) &&
        Objects.equals(this.groupBy, groupQueryParams.groupBy) &&
        Objects.equals(this.columns, groupQueryParams.columns) &&
        Objects.equals(this.having, groupQueryParams.having) &&
        Objects.equals(this.sort, groupQueryParams.sort) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregations, formulas, groupBy, columns, having, sort, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupQueryParams {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    aggregations: ").append(toIndentedString(aggregations)).append("\n");
    sb.append("    formulas: ").append(toIndentedString(formulas)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    having: ").append(toIndentedString(having)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

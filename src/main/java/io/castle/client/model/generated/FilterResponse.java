/*
 * Castle API
 * ## Introduction  **Just getting started? Check out our [quick start guide](https://docs.castle.io/docs/quickstart)**  Castle APIs uses standard HTTP response codes, authentication and verbs. JSON is used as data exchange format, both for parsing incoming request bodies, and in the returned response. This means that the `Content-Type` header should to be set to `application/json` in requests with a body, such as `POST` or `PUT`.  All API requests must be made over [HTTPS](http://en.wikipedia.org/wiki/HTTP_Secure). Non-HTTPS calls will fail and the **TLS version needs to be 1.1 or higher**.  ## Supported types  For a list of supported types, see our [Types Reference](https://docs.castle.io/docs/events).   ## Rate limits  Our Risk, Log (and the legacy Authenticate) APIs have a per-user-id rate limit of 6 requests per second and 10 requests per 5 seconds. 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.castle.client.model.generated;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.castle.client.model.generated.Policy;

/**
 * FilterResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-05-16T17:44:30.591898+02:00[Europe/Stockholm]")
public class FilterResponse {
  public static final String SERIALIZED_NAME_RISK = "risk";
  @SerializedName(SERIALIZED_NAME_RISK)
  private double risk;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private Policy policy;

  public static final String SERIALIZED_NAME_SIGNALS = "signals";
  @SerializedName(SERIALIZED_NAME_SIGNALS)
  private Map<String, Object> signals = new HashMap<String, Object>();


   /**
   * Calculated Risk.
   * minimum: 0
   * maximum: 1
   * @return risk
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0.65", required = true, value = "Calculated Risk.")

  public double getRisk() {
    return risk;
  }




  public FilterResponse policy(Policy policy) {
    
    this.policy = policy;
    return this;
  }

   /**
   * Get policy
   * @return policy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Policy getPolicy() {
    return policy;
  }


  public void setPolicy(Policy policy) {
    this.policy = policy;
  }


   /**
   * Signals triggered for this event/context
   * @return signals
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "{\"bot_behavior\":{},\"proxy_ip\":{},\"disposable_email\":{},\"spoofed_device\":{},\"multiple_accounts_per_device\":{}}", required = true, value = "Signals triggered for this event/context")

  public Map<String, Object> getSignals() {
    return signals;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterResponse filterResponse = (FilterResponse) o;
    return Objects.equals(this.risk, filterResponse.risk) &&
        Objects.equals(this.policy, filterResponse.policy) &&
        Objects.equals(this.signals, filterResponse.signals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(risk, policy, signals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterResponse {\n");
    sb.append("    risk: ").append(toIndentedString(risk)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    signals: ").append(toIndentedString(signals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

